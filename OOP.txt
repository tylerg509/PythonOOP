1) encapsulation
#encapsulation refeers to the safe storage of data as attributes in an instance
#data should only be accessed throug instance methods
#data should be validated as correct depending on the requirements set in class methods
#data should be safe from changes by external processes 

#breaking encapsulation = setting value without setter method

2) Inheritance
#one class can inherit from another
    #the class attributes are inherited
    #in particular its methods are inherited
    #this means that instances of an inheriting (child) class can access atttributes of the inherited (parent) class
#inheritance is another level of attribute lookup: instance, then class, then inherited class, is the loopup pattern

3) Polymorphism
#two classes with same interface (method name)
#two methods are often different but conceptually similar
#allows for expressiveness in design. we can say that this group of related classes implement the same action
#duck typing refers to reading an objects attributes to decide whether it is of a proper type rather than checking the type itself
    #it walks and talks like a duck so we will just call methods on it instead of checking whether its possible






Inheritance terms 
1. inheriting class  = class MyClass(YourClass):
    child class
    derived class
    subclass
2. inherited class = class YourClass(object):
    parent class
    base class
    superclass

Inheritance: Implement Parent Class
ways to implement a parent classs
inherit: use parent class defined method
override/overload: provide childs own version of a metehod
extend: do work in addition to parents method
provide: implement abstract method that parent requires

